#pragma once

#include <cstdint>
#include <memory>

namespace nimbus
{
//////////////////////////////////////////////////////
// Integers
//////////////////////////////////////////////////////

///////////////////////////
// Unsigned
///////////////////////////
using u8_t   = uint8_t;
using u16_t  = uint16_t;
using u32_t  = uint32_t;
using u64_t  = uint64_t;
using u128_t = __uint128_t;  // gcc/clang

///////////////////////////
// Signed
///////////////////////////
using i8_t   = int8_t;
using i16_t  = int16_t;
using i32_t  = int32_t;
using i64_t  = int64_t;
using i128_t = __int128_t;  // gcc/clang

//////////////////////////////////////////////////////
// Floats
//////////////////////////////////////////////////////

using f32_t = float;
using f64_t = double;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Templates to help increase brevity of using smart pointers.
// Credit Hazel
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename T>
using scope = std::unique_ptr<T>;
template <typename T, typename... Args>
constexpr scope<T> genScope(Args&&... args)
{
    return std::make_unique<T>(std::forward<Args>(args)...);
}

}  // namespace nimbus
